// Code generated by mockery. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// LuhnService is an autogenerated mock type for the LuhnService type
type LuhnService struct {
	mock.Mock
}

type LuhnService_Expecter struct {
	mock *mock.Mock
}

func (_m *LuhnService) EXPECT() *LuhnService_Expecter {
	return &LuhnService_Expecter{mock: &_m.Mock}
}

// Validate provides a mock function with given fields: number
func (_m *LuhnService) Validate(number string) bool {
	ret := _m.Called(number)

	if len(ret) == 0 {
		panic("no return value specified for Validate")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(number)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// LuhnService_Validate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Validate'
type LuhnService_Validate_Call struct {
	*mock.Call
}

// Validate is a helper method to define mock.On call
//   - number string
func (_e *LuhnService_Expecter) Validate(number interface{}) *LuhnService_Validate_Call {
	return &LuhnService_Validate_Call{Call: _e.mock.On("Validate", number)}
}

func (_c *LuhnService_Validate_Call) Run(run func(number string)) *LuhnService_Validate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *LuhnService_Validate_Call) Return(_a0 bool) *LuhnService_Validate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LuhnService_Validate_Call) RunAndReturn(run func(string) bool) *LuhnService_Validate_Call {
	_c.Call.Return(run)
	return _c
}

// NewLuhnService creates a new instance of LuhnService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLuhnService(t interface {
	mock.TestingT
	Cleanup(func())
}) *LuhnService {
	mock := &LuhnService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
