// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/DyadyaRodya/gofermart/internal/interactors/dto"

	mock "github.com/stretchr/testify/mock"

	models "github.com/DyadyaRodya/gofermart/internal/domain/models"
)

// RepoSession is an autogenerated mock type for the RepoSession type
type RepoSession struct {
	mock.Mock
}

type RepoSession_Expecter struct {
	mock *mock.Mock
}

func (_m *RepoSession) EXPECT() *RepoSession_Expecter {
	return &RepoSession_Expecter{mock: &_m.Mock}
}

// AddOrder provides a mock function with given fields: ctx, order
func (_m *RepoSession) AddOrder(ctx context.Context, order *models.Order) (*models.Order, error) {
	ret := _m.Called(ctx, order)

	if len(ret) == 0 {
		panic("no return value specified for AddOrder")
	}

	var r0 *models.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Order) (*models.Order, error)); ok {
		return rf(ctx, order)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Order) *models.Order); ok {
		r0 = rf(ctx, order)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Order) error); ok {
		r1 = rf(ctx, order)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RepoSession_AddOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddOrder'
type RepoSession_AddOrder_Call struct {
	*mock.Call
}

// AddOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - order *models.Order
func (_e *RepoSession_Expecter) AddOrder(ctx interface{}, order interface{}) *RepoSession_AddOrder_Call {
	return &RepoSession_AddOrder_Call{Call: _e.mock.On("AddOrder", ctx, order)}
}

func (_c *RepoSession_AddOrder_Call) Run(run func(ctx context.Context, order *models.Order)) *RepoSession_AddOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Order))
	})
	return _c
}

func (_c *RepoSession_AddOrder_Call) Return(_a0 *models.Order, _a1 error) *RepoSession_AddOrder_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RepoSession_AddOrder_Call) RunAndReturn(run func(context.Context, *models.Order) (*models.Order, error)) *RepoSession_AddOrder_Call {
	_c.Call.Return(run)
	return _c
}

// AddUser provides a mock function with given fields: ctx, user
func (_m *RepoSession) AddUser(ctx context.Context, user *models.UserInfo) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for AddUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.UserInfo) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RepoSession_AddUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddUser'
type RepoSession_AddUser_Call struct {
	*mock.Call
}

// AddUser is a helper method to define mock.On call
//   - ctx context.Context
//   - user *models.UserInfo
func (_e *RepoSession_Expecter) AddUser(ctx interface{}, user interface{}) *RepoSession_AddUser_Call {
	return &RepoSession_AddUser_Call{Call: _e.mock.On("AddUser", ctx, user)}
}

func (_c *RepoSession_AddUser_Call) Run(run func(ctx context.Context, user *models.UserInfo)) *RepoSession_AddUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.UserInfo))
	})
	return _c
}

func (_c *RepoSession_AddUser_Call) Return(_a0 error) *RepoSession_AddUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RepoSession_AddUser_Call) RunAndReturn(run func(context.Context, *models.UserInfo) error) *RepoSession_AddUser_Call {
	_c.Call.Return(run)
	return _c
}

// AddWithdraw provides a mock function with given fields: ctx, withdraw
func (_m *RepoSession) AddWithdraw(ctx context.Context, withdraw *models.Withdraw) (*models.Withdraw, error) {
	ret := _m.Called(ctx, withdraw)

	if len(ret) == 0 {
		panic("no return value specified for AddWithdraw")
	}

	var r0 *models.Withdraw
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Withdraw) (*models.Withdraw, error)); ok {
		return rf(ctx, withdraw)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Withdraw) *models.Withdraw); ok {
		r0 = rf(ctx, withdraw)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Withdraw)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Withdraw) error); ok {
		r1 = rf(ctx, withdraw)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RepoSession_AddWithdraw_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddWithdraw'
type RepoSession_AddWithdraw_Call struct {
	*mock.Call
}

// AddWithdraw is a helper method to define mock.On call
//   - ctx context.Context
//   - withdraw *models.Withdraw
func (_e *RepoSession_Expecter) AddWithdraw(ctx interface{}, withdraw interface{}) *RepoSession_AddWithdraw_Call {
	return &RepoSession_AddWithdraw_Call{Call: _e.mock.On("AddWithdraw", ctx, withdraw)}
}

func (_c *RepoSession_AddWithdraw_Call) Run(run func(ctx context.Context, withdraw *models.Withdraw)) *RepoSession_AddWithdraw_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Withdraw))
	})
	return _c
}

func (_c *RepoSession_AddWithdraw_Call) Return(_a0 *models.Withdraw, _a1 error) *RepoSession_AddWithdraw_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RepoSession_AddWithdraw_Call) RunAndReturn(run func(context.Context, *models.Withdraw) (*models.Withdraw, error)) *RepoSession_AddWithdraw_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function with given fields: ctx
func (_m *RepoSession) Close(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RepoSession_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type RepoSession_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
//   - ctx context.Context
func (_e *RepoSession_Expecter) Close(ctx interface{}) *RepoSession_Close_Call {
	return &RepoSession_Close_Call{Call: _e.mock.On("Close", ctx)}
}

func (_c *RepoSession_Close_Call) Run(run func(ctx context.Context)) *RepoSession_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *RepoSession_Close_Call) Return(_a0 error) *RepoSession_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RepoSession_Close_Call) RunAndReturn(run func(context.Context) error) *RepoSession_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Commit provides a mock function with given fields: ctx
func (_m *RepoSession) Commit(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Commit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RepoSession_Commit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Commit'
type RepoSession_Commit_Call struct {
	*mock.Call
}

// Commit is a helper method to define mock.On call
//   - ctx context.Context
func (_e *RepoSession_Expecter) Commit(ctx interface{}) *RepoSession_Commit_Call {
	return &RepoSession_Commit_Call{Call: _e.mock.On("Commit", ctx)}
}

func (_c *RepoSession_Commit_Call) Run(run func(ctx context.Context)) *RepoSession_Commit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *RepoSession_Commit_Call) Return(_a0 error) *RepoSession_Commit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RepoSession_Commit_Call) RunAndReturn(run func(context.Context) error) *RepoSession_Commit_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrderByNumberAndUserUUID provides a mock function with given fields: ctx, number, userUUID
func (_m *RepoSession) GetOrderByNumberAndUserUUID(ctx context.Context, number string, userUUID string) (*models.Order, error) {
	ret := _m.Called(ctx, number, userUUID)

	if len(ret) == 0 {
		panic("no return value specified for GetOrderByNumberAndUserUUID")
	}

	var r0 *models.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*models.Order, error)); ok {
		return rf(ctx, number, userUUID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *models.Order); ok {
		r0 = rf(ctx, number, userUUID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, number, userUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RepoSession_GetOrderByNumberAndUserUUID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrderByNumberAndUserUUID'
type RepoSession_GetOrderByNumberAndUserUUID_Call struct {
	*mock.Call
}

// GetOrderByNumberAndUserUUID is a helper method to define mock.On call
//   - ctx context.Context
//   - number string
//   - userUUID string
func (_e *RepoSession_Expecter) GetOrderByNumberAndUserUUID(ctx interface{}, number interface{}, userUUID interface{}) *RepoSession_GetOrderByNumberAndUserUUID_Call {
	return &RepoSession_GetOrderByNumberAndUserUUID_Call{Call: _e.mock.On("GetOrderByNumberAndUserUUID", ctx, number, userUUID)}
}

func (_c *RepoSession_GetOrderByNumberAndUserUUID_Call) Run(run func(ctx context.Context, number string, userUUID string)) *RepoSession_GetOrderByNumberAndUserUUID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *RepoSession_GetOrderByNumberAndUserUUID_Call) Return(_a0 *models.Order, _a1 error) *RepoSession_GetOrderByNumberAndUserUUID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RepoSession_GetOrderByNumberAndUserUUID_Call) RunAndReturn(run func(context.Context, string, string) (*models.Order, error)) *RepoSession_GetOrderByNumberAndUserUUID_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrdersByUserUUID provides a mock function with given fields: ctx, userUUID
func (_m *RepoSession) GetOrdersByUserUUID(ctx context.Context, userUUID string) ([]*models.Order, error) {
	ret := _m.Called(ctx, userUUID)

	if len(ret) == 0 {
		panic("no return value specified for GetOrdersByUserUUID")
	}

	var r0 []*models.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*models.Order, error)); ok {
		return rf(ctx, userUUID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*models.Order); ok {
		r0 = rf(ctx, userUUID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RepoSession_GetOrdersByUserUUID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrdersByUserUUID'
type RepoSession_GetOrdersByUserUUID_Call struct {
	*mock.Call
}

// GetOrdersByUserUUID is a helper method to define mock.On call
//   - ctx context.Context
//   - userUUID string
func (_e *RepoSession_Expecter) GetOrdersByUserUUID(ctx interface{}, userUUID interface{}) *RepoSession_GetOrdersByUserUUID_Call {
	return &RepoSession_GetOrdersByUserUUID_Call{Call: _e.mock.On("GetOrdersByUserUUID", ctx, userUUID)}
}

func (_c *RepoSession_GetOrdersByUserUUID_Call) Run(run func(ctx context.Context, userUUID string)) *RepoSession_GetOrdersByUserUUID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *RepoSession_GetOrdersByUserUUID_Call) Return(_a0 []*models.Order, _a1 error) *RepoSession_GetOrdersByUserUUID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RepoSession_GetOrdersByUserUUID_Call) RunAndReturn(run func(context.Context, string) ([]*models.Order, error)) *RepoSession_GetOrdersByUserUUID_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransactionSumInfoByUserUUID provides a mock function with given fields: ctx, userUUID
func (_m *RepoSession) GetTransactionSumInfoByUserUUID(ctx context.Context, userUUID string) (*dto.TransactionSumInfo, error) {
	ret := _m.Called(ctx, userUUID)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionSumInfoByUserUUID")
	}

	var r0 *dto.TransactionSumInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*dto.TransactionSumInfo, error)); ok {
		return rf(ctx, userUUID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *dto.TransactionSumInfo); ok {
		r0 = rf(ctx, userUUID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.TransactionSumInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RepoSession_GetTransactionSumInfoByUserUUID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransactionSumInfoByUserUUID'
type RepoSession_GetTransactionSumInfoByUserUUID_Call struct {
	*mock.Call
}

// GetTransactionSumInfoByUserUUID is a helper method to define mock.On call
//   - ctx context.Context
//   - userUUID string
func (_e *RepoSession_Expecter) GetTransactionSumInfoByUserUUID(ctx interface{}, userUUID interface{}) *RepoSession_GetTransactionSumInfoByUserUUID_Call {
	return &RepoSession_GetTransactionSumInfoByUserUUID_Call{Call: _e.mock.On("GetTransactionSumInfoByUserUUID", ctx, userUUID)}
}

func (_c *RepoSession_GetTransactionSumInfoByUserUUID_Call) Run(run func(ctx context.Context, userUUID string)) *RepoSession_GetTransactionSumInfoByUserUUID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *RepoSession_GetTransactionSumInfoByUserUUID_Call) Return(_a0 *dto.TransactionSumInfo, _a1 error) *RepoSession_GetTransactionSumInfoByUserUUID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RepoSession_GetTransactionSumInfoByUserUUID_Call) RunAndReturn(run func(context.Context, string) (*dto.TransactionSumInfo, error)) *RepoSession_GetTransactionSumInfoByUserUUID_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByLogin provides a mock function with given fields: ctx, login
func (_m *RepoSession) GetUserByLogin(ctx context.Context, login string) (*models.UserInfo, error) {
	ret := _m.Called(ctx, login)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByLogin")
	}

	var r0 *models.UserInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.UserInfo, error)); ok {
		return rf(ctx, login)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.UserInfo); ok {
		r0 = rf(ctx, login)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, login)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RepoSession_GetUserByLogin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByLogin'
type RepoSession_GetUserByLogin_Call struct {
	*mock.Call
}

// GetUserByLogin is a helper method to define mock.On call
//   - ctx context.Context
//   - login string
func (_e *RepoSession_Expecter) GetUserByLogin(ctx interface{}, login interface{}) *RepoSession_GetUserByLogin_Call {
	return &RepoSession_GetUserByLogin_Call{Call: _e.mock.On("GetUserByLogin", ctx, login)}
}

func (_c *RepoSession_GetUserByLogin_Call) Run(run func(ctx context.Context, login string)) *RepoSession_GetUserByLogin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *RepoSession_GetUserByLogin_Call) Return(_a0 *models.UserInfo, _a1 error) *RepoSession_GetUserByLogin_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RepoSession_GetUserByLogin_Call) RunAndReturn(run func(context.Context, string) (*models.UserInfo, error)) *RepoSession_GetUserByLogin_Call {
	_c.Call.Return(run)
	return _c
}

// GetWithdrawalsByUserUUID provides a mock function with given fields: ctx, userUUID
func (_m *RepoSession) GetWithdrawalsByUserUUID(ctx context.Context, userUUID string) ([]*models.Withdraw, error) {
	ret := _m.Called(ctx, userUUID)

	if len(ret) == 0 {
		panic("no return value specified for GetWithdrawalsByUserUUID")
	}

	var r0 []*models.Withdraw
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*models.Withdraw, error)); ok {
		return rf(ctx, userUUID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*models.Withdraw); ok {
		r0 = rf(ctx, userUUID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Withdraw)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RepoSession_GetWithdrawalsByUserUUID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWithdrawalsByUserUUID'
type RepoSession_GetWithdrawalsByUserUUID_Call struct {
	*mock.Call
}

// GetWithdrawalsByUserUUID is a helper method to define mock.On call
//   - ctx context.Context
//   - userUUID string
func (_e *RepoSession_Expecter) GetWithdrawalsByUserUUID(ctx interface{}, userUUID interface{}) *RepoSession_GetWithdrawalsByUserUUID_Call {
	return &RepoSession_GetWithdrawalsByUserUUID_Call{Call: _e.mock.On("GetWithdrawalsByUserUUID", ctx, userUUID)}
}

func (_c *RepoSession_GetWithdrawalsByUserUUID_Call) Run(run func(ctx context.Context, userUUID string)) *RepoSession_GetWithdrawalsByUserUUID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *RepoSession_GetWithdrawalsByUserUUID_Call) Return(_a0 []*models.Withdraw, _a1 error) *RepoSession_GetWithdrawalsByUserUUID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RepoSession_GetWithdrawalsByUserUUID_Call) RunAndReturn(run func(context.Context, string) ([]*models.Withdraw, error)) *RepoSession_GetWithdrawalsByUserUUID_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOrder provides a mock function with given fields: ctx, order
func (_m *RepoSession) UpdateOrder(ctx context.Context, order *models.Order) error {
	ret := _m.Called(ctx, order)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Order) error); ok {
		r0 = rf(ctx, order)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RepoSession_UpdateOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOrder'
type RepoSession_UpdateOrder_Call struct {
	*mock.Call
}

// UpdateOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - order *models.Order
func (_e *RepoSession_Expecter) UpdateOrder(ctx interface{}, order interface{}) *RepoSession_UpdateOrder_Call {
	return &RepoSession_UpdateOrder_Call{Call: _e.mock.On("UpdateOrder", ctx, order)}
}

func (_c *RepoSession_UpdateOrder_Call) Run(run func(ctx context.Context, order *models.Order)) *RepoSession_UpdateOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Order))
	})
	return _c
}

func (_c *RepoSession_UpdateOrder_Call) Return(_a0 error) *RepoSession_UpdateOrder_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RepoSession_UpdateOrder_Call) RunAndReturn(run func(context.Context, *models.Order) error) *RepoSession_UpdateOrder_Call {
	_c.Call.Return(run)
	return _c
}

// NewRepoSession creates a new instance of RepoSession. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepoSession(t interface {
	mock.TestingT
	Cleanup(func())
}) *RepoSession {
	mock := &RepoSession{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
