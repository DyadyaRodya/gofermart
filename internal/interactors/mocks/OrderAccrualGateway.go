// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/DyadyaRodya/gofermart/internal/interactors/dto"

	mock "github.com/stretchr/testify/mock"
)

// OrderAccrualGateway is an autogenerated mock type for the OrderAccrualGateway type
type OrderAccrualGateway struct {
	mock.Mock
}

type OrderAccrualGateway_Expecter struct {
	mock *mock.Mock
}

func (_m *OrderAccrualGateway) EXPECT() *OrderAccrualGateway_Expecter {
	return &OrderAccrualGateway_Expecter{mock: &_m.Mock}
}

// GetOrderAccrual provides a mock function with given fields: ctx, orderNumber
func (_m *OrderAccrualGateway) GetOrderAccrual(ctx context.Context, orderNumber string) (*dto.OrderAccrual, error) {
	ret := _m.Called(ctx, orderNumber)

	if len(ret) == 0 {
		panic("no return value specified for GetOrderAccrual")
	}

	var r0 *dto.OrderAccrual
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*dto.OrderAccrual, error)); ok {
		return rf(ctx, orderNumber)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *dto.OrderAccrual); ok {
		r0 = rf(ctx, orderNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.OrderAccrual)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, orderNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderAccrualGateway_GetOrderAccrual_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrderAccrual'
type OrderAccrualGateway_GetOrderAccrual_Call struct {
	*mock.Call
}

// GetOrderAccrual is a helper method to define mock.On call
//   - ctx context.Context
//   - orderNumber string
func (_e *OrderAccrualGateway_Expecter) GetOrderAccrual(ctx interface{}, orderNumber interface{}) *OrderAccrualGateway_GetOrderAccrual_Call {
	return &OrderAccrualGateway_GetOrderAccrual_Call{Call: _e.mock.On("GetOrderAccrual", ctx, orderNumber)}
}

func (_c *OrderAccrualGateway_GetOrderAccrual_Call) Run(run func(ctx context.Context, orderNumber string)) *OrderAccrualGateway_GetOrderAccrual_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *OrderAccrualGateway_GetOrderAccrual_Call) Return(_a0 *dto.OrderAccrual, _a1 error) *OrderAccrualGateway_GetOrderAccrual_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrderAccrualGateway_GetOrderAccrual_Call) RunAndReturn(run func(context.Context, string) (*dto.OrderAccrual, error)) *OrderAccrualGateway_GetOrderAccrual_Call {
	_c.Call.Return(run)
	return _c
}

// NewOrderAccrualGateway creates a new instance of OrderAccrualGateway. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrderAccrualGateway(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrderAccrualGateway {
	mock := &OrderAccrualGateway{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
