// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	interfaces "github.com/DyadyaRodya/gofermart/internal/interactors/interfaces"
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

type Repository_Expecter struct {
	mock *mock.Mock
}

func (_m *Repository) EXPECT() *Repository_Expecter {
	return &Repository_Expecter{mock: &_m.Mock}
}

// NewSerializableSession provides a mock function with given fields: ctx
func (_m *Repository) NewSerializableSession(ctx context.Context) (interfaces.RepoSession, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for NewSerializableSession")
	}

	var r0 interfaces.RepoSession
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (interfaces.RepoSession, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) interfaces.RepoSession); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.RepoSession)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_NewSerializableSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewSerializableSession'
type Repository_NewSerializableSession_Call struct {
	*mock.Call
}

// NewSerializableSession is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Repository_Expecter) NewSerializableSession(ctx interface{}) *Repository_NewSerializableSession_Call {
	return &Repository_NewSerializableSession_Call{Call: _e.mock.On("NewSerializableSession", ctx)}
}

func (_c *Repository_NewSerializableSession_Call) Run(run func(ctx context.Context)) *Repository_NewSerializableSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Repository_NewSerializableSession_Call) Return(_a0 interfaces.RepoSession, _a1 error) *Repository_NewSerializableSession_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_NewSerializableSession_Call) RunAndReturn(run func(context.Context) (interfaces.RepoSession, error)) *Repository_NewSerializableSession_Call {
	_c.Call.Return(run)
	return _c
}

// NewSession provides a mock function with given fields: ctx
func (_m *Repository) NewSession(ctx context.Context) (interfaces.RepoSession, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for NewSession")
	}

	var r0 interfaces.RepoSession
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (interfaces.RepoSession, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) interfaces.RepoSession); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.RepoSession)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_NewSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewSession'
type Repository_NewSession_Call struct {
	*mock.Call
}

// NewSession is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Repository_Expecter) NewSession(ctx interface{}) *Repository_NewSession_Call {
	return &Repository_NewSession_Call{Call: _e.mock.On("NewSession", ctx)}
}

func (_c *Repository_NewSession_Call) Run(run func(ctx context.Context)) *Repository_NewSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Repository_NewSession_Call) Return(_a0 interfaces.RepoSession, _a1 error) *Repository_NewSession_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_NewSession_Call) RunAndReturn(run func(context.Context) (interfaces.RepoSession, error)) *Repository_NewSession_Call {
	_c.Call.Return(run)
	return _c
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
